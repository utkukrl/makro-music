// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: photo_management.proto

package photomanagementproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PhotoService_UploadImage_FullMethodName       = "/photo_management.PhotoService/UploadImage"
	PhotoService_GetImageDetail_FullMethodName    = "/photo_management.PhotoService/GetImageDetail"
	PhotoService_GetImageFeed_FullMethodName      = "/photo_management.PhotoService/GetImageFeed"
	PhotoService_UpdateImageDetail_FullMethodName = "/photo_management.PhotoService/UpdateImageDetail"
)

// PhotoServiceClient is the client API for PhotoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoServiceClient interface {
	UploadImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
	GetImageDetail(ctx context.Context, in *ImageDetailRequest, opts ...grpc.CallOption) (*ImageDetailResponse, error)
	GetImageFeed(ctx context.Context, in *ImageFeedRequest, opts ...grpc.CallOption) (*ImageFeedResponse, error)
	UpdateImageDetail(ctx context.Context, in *UpdateImageDetailRequest, opts ...grpc.CallOption) (*UpdateImageDetailResponse, error)
}

type photoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoServiceClient(cc grpc.ClientConnInterface) PhotoServiceClient {
	return &photoServiceClient{cc}
}

func (c *photoServiceClient) UploadImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, PhotoService_UploadImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) GetImageDetail(ctx context.Context, in *ImageDetailRequest, opts ...grpc.CallOption) (*ImageDetailResponse, error) {
	out := new(ImageDetailResponse)
	err := c.cc.Invoke(ctx, PhotoService_GetImageDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) GetImageFeed(ctx context.Context, in *ImageFeedRequest, opts ...grpc.CallOption) (*ImageFeedResponse, error) {
	out := new(ImageFeedResponse)
	err := c.cc.Invoke(ctx, PhotoService_GetImageFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) UpdateImageDetail(ctx context.Context, in *UpdateImageDetailRequest, opts ...grpc.CallOption) (*UpdateImageDetailResponse, error) {
	out := new(UpdateImageDetailResponse)
	err := c.cc.Invoke(ctx, PhotoService_UpdateImageDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoServiceServer is the server API for PhotoService service.
// All implementations must embed UnimplementedPhotoServiceServer
// for forward compatibility
type PhotoServiceServer interface {
	UploadImage(context.Context, *ImageRequest) (*ImageResponse, error)
	GetImageDetail(context.Context, *ImageDetailRequest) (*ImageDetailResponse, error)
	GetImageFeed(context.Context, *ImageFeedRequest) (*ImageFeedResponse, error)
	UpdateImageDetail(context.Context, *UpdateImageDetailRequest) (*UpdateImageDetailResponse, error)
	mustEmbedUnimplementedPhotoServiceServer()
}

// UnimplementedPhotoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPhotoServiceServer struct {
}

func (UnimplementedPhotoServiceServer) UploadImage(context.Context, *ImageRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedPhotoServiceServer) GetImageDetail(context.Context, *ImageDetailRequest) (*ImageDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageDetail not implemented")
}
func (UnimplementedPhotoServiceServer) GetImageFeed(context.Context, *ImageFeedRequest) (*ImageFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageFeed not implemented")
}
func (UnimplementedPhotoServiceServer) UpdateImageDetail(context.Context, *UpdateImageDetailRequest) (*UpdateImageDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageDetail not implemented")
}
func (UnimplementedPhotoServiceServer) mustEmbedUnimplementedPhotoServiceServer() {}

// UnsafePhotoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoServiceServer will
// result in compilation errors.
type UnsafePhotoServiceServer interface {
	mustEmbedUnimplementedPhotoServiceServer()
}

func RegisterPhotoServiceServer(s grpc.ServiceRegistrar, srv PhotoServiceServer) {
	s.RegisterService(&PhotoService_ServiceDesc, srv)
}

func _PhotoService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoService_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).UploadImage(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_GetImageDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).GetImageDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoService_GetImageDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).GetImageDetail(ctx, req.(*ImageDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_GetImageFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).GetImageFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoService_GetImageFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).GetImageFeed(ctx, req.(*ImageFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_UpdateImageDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).UpdateImageDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoService_UpdateImageDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).UpdateImageDetail(ctx, req.(*UpdateImageDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotoService_ServiceDesc is the grpc.ServiceDesc for PhotoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photo_management.PhotoService",
	HandlerType: (*PhotoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _PhotoService_UploadImage_Handler,
		},
		{
			MethodName: "GetImageDetail",
			Handler:    _PhotoService_GetImageDetail_Handler,
		},
		{
			MethodName: "GetImageFeed",
			Handler:    _PhotoService_GetImageFeed_Handler,
		},
		{
			MethodName: "UpdateImageDetail",
			Handler:    _PhotoService_UpdateImageDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "photo_management.proto",
}
